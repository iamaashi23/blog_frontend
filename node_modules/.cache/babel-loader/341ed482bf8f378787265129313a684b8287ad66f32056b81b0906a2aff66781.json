{"ast":null,"code":"\"use strict\";\n\nexports.getWeek = getWeek;\nvar _index = require(\"./constants.js\");\nvar _index2 = require(\"./startOfWeek.js\");\nvar _index3 = require(\"./startOfWeekYear.js\");\nvar _index4 = require(\"./toDate.js\");\n\n/**\n * The {@link getWeek} function options.\n */\n\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The week\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\n\nfunction getWeek(date, options) {\n  const _date = (0, _index4.toDate)(date);\n  const diff = (0, _index2.startOfWeek)(_date, options).getTime() - (0, _index3.startOfWeekYear)(_date, options).getTime();\n\n  // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n  return Math.round(diff / _index.millisecondsInWeek) + 1;\n}","map":{"version":3,"names":["exports","getWeek","_index","require","_index2","_index3","_index4","date","options","_date","toDate","diff","startOfWeek","getTime","startOfWeekYear","Math","round","millisecondsInWeek"],"sources":["C:/Users/aashi/OneDrive/Desktop/mern_blog/client/node_modules/date-fns/getWeek.js"],"sourcesContent":["\"use strict\";\nexports.getWeek = getWeek;\nvar _index = require(\"./constants.js\");\nvar _index2 = require(\"./startOfWeek.js\");\nvar _index3 = require(\"./startOfWeekYear.js\");\nvar _index4 = require(\"./toDate.js\");\n\n/**\n * The {@link getWeek} function options.\n */\n\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The week\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\n\nfunction getWeek(date, options) {\n  const _date = (0, _index4.toDate)(date);\n  const diff =\n    (0, _index2.startOfWeek)(_date, options).getTime() -\n    (0, _index3.startOfWeekYear)(_date, options).getTime();\n\n  // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n  return Math.round(diff / _index.millisecondsInWeek) + 1;\n}\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,OAAO,GAAGA,OAAO;AACzB,IAAIC,MAAM,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AACtC,IAAIC,OAAO,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AACzC,IAAIE,OAAO,GAAGF,OAAO,CAAC,sBAAsB,CAAC;AAC7C,IAAIG,OAAO,GAAGH,OAAO,CAAC,aAAa,CAAC;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASF,OAAOA,CAACM,IAAI,EAAEC,OAAO,EAAE;EAC9B,MAAMC,KAAK,GAAG,CAAC,CAAC,EAAEH,OAAO,CAACI,MAAM,EAAEH,IAAI,CAAC;EACvC,MAAMI,IAAI,GACR,CAAC,CAAC,EAAEP,OAAO,CAACQ,WAAW,EAAEH,KAAK,EAAED,OAAO,CAAC,CAACK,OAAO,CAAC,CAAC,GAClD,CAAC,CAAC,EAAER,OAAO,CAACS,eAAe,EAAEL,KAAK,EAAED,OAAO,CAAC,CAACK,OAAO,CAAC,CAAC;;EAExD;EACA;EACA;EACA,OAAOE,IAAI,CAACC,KAAK,CAACL,IAAI,GAAGT,MAAM,CAACe,kBAAkB,CAAC,GAAG,CAAC;AACzD"},"metadata":{},"sourceType":"script","externalDependencies":[]}