{"ast":null,"code":"\"use strict\";\n\nexports.differenceInCalendarISOWeeks = differenceInCalendarISOWeeks;\nvar _index = require(\"./constants.js\");\nvar _index2 = require(\"./startOfISOWeek.js\");\nvar _index3 = require(\"./_lib/getTimezoneOffsetInMilliseconds.js\");\n\n/**\n * @name differenceInCalendarISOWeeks\n * @category ISO Week Helpers\n * @summary Get the number of calendar ISO weeks between the given dates.\n *\n * @description\n * Get the number of calendar ISO weeks between the given dates.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of calendar ISO weeks\n *\n * @example\n * // How many calendar ISO weeks are between 6 July 2014 and 21 July 2014?\n * const result = differenceInCalendarISOWeeks(\n *   new Date(2014, 6, 21),\n *   new Date(2014, 6, 6)\n * )\n * //=> 3\n */\nfunction differenceInCalendarISOWeeks(dateLeft, dateRight) {\n  const startOfISOWeekLeft = (0, _index2.startOfISOWeek)(dateLeft);\n  const startOfISOWeekRight = (0, _index2.startOfISOWeek)(dateRight);\n  const timestampLeft = startOfISOWeekLeft.getTime() - (0, _index3.getTimezoneOffsetInMilliseconds)(startOfISOWeekLeft);\n  const timestampRight = startOfISOWeekRight.getTime() - (0, _index3.getTimezoneOffsetInMilliseconds)(startOfISOWeekRight);\n\n  // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n  return Math.round((timestampLeft - timestampRight) / _index.millisecondsInWeek);\n}","map":{"version":3,"names":["exports","differenceInCalendarISOWeeks","_index","require","_index2","_index3","dateLeft","dateRight","startOfISOWeekLeft","startOfISOWeek","startOfISOWeekRight","timestampLeft","getTime","getTimezoneOffsetInMilliseconds","timestampRight","Math","round","millisecondsInWeek"],"sources":["C:/Users/aashi/OneDrive/Desktop/mern_blog/client/node_modules/date-fns/differenceInCalendarISOWeeks.js"],"sourcesContent":["\"use strict\";\nexports.differenceInCalendarISOWeeks = differenceInCalendarISOWeeks;\nvar _index = require(\"./constants.js\");\nvar _index2 = require(\"./startOfISOWeek.js\");\nvar _index3 = require(\"./_lib/getTimezoneOffsetInMilliseconds.js\");\n\n/**\n * @name differenceInCalendarISOWeeks\n * @category ISO Week Helpers\n * @summary Get the number of calendar ISO weeks between the given dates.\n *\n * @description\n * Get the number of calendar ISO weeks between the given dates.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of calendar ISO weeks\n *\n * @example\n * // How many calendar ISO weeks are between 6 July 2014 and 21 July 2014?\n * const result = differenceInCalendarISOWeeks(\n *   new Date(2014, 6, 21),\n *   new Date(2014, 6, 6)\n * )\n * //=> 3\n */\nfunction differenceInCalendarISOWeeks(dateLeft, dateRight) {\n  const startOfISOWeekLeft = (0, _index2.startOfISOWeek)(dateLeft);\n  const startOfISOWeekRight = (0, _index2.startOfISOWeek)(dateRight);\n\n  const timestampLeft =\n    startOfISOWeekLeft.getTime() -\n    (0, _index3.getTimezoneOffsetInMilliseconds)(startOfISOWeekLeft);\n  const timestampRight =\n    startOfISOWeekRight.getTime() -\n    (0, _index3.getTimezoneOffsetInMilliseconds)(startOfISOWeekRight);\n\n  // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n  return Math.round(\n    (timestampLeft - timestampRight) / _index.millisecondsInWeek,\n  );\n}\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,4BAA4B,GAAGA,4BAA4B;AACnE,IAAIC,MAAM,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AACtC,IAAIC,OAAO,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAC5C,IAAIE,OAAO,GAAGF,OAAO,CAAC,2CAA2C,CAAC;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,4BAA4BA,CAACK,QAAQ,EAAEC,SAAS,EAAE;EACzD,MAAMC,kBAAkB,GAAG,CAAC,CAAC,EAAEJ,OAAO,CAACK,cAAc,EAAEH,QAAQ,CAAC;EAChE,MAAMI,mBAAmB,GAAG,CAAC,CAAC,EAAEN,OAAO,CAACK,cAAc,EAAEF,SAAS,CAAC;EAElE,MAAMI,aAAa,GACjBH,kBAAkB,CAACI,OAAO,CAAC,CAAC,GAC5B,CAAC,CAAC,EAAEP,OAAO,CAACQ,+BAA+B,EAAEL,kBAAkB,CAAC;EAClE,MAAMM,cAAc,GAClBJ,mBAAmB,CAACE,OAAO,CAAC,CAAC,GAC7B,CAAC,CAAC,EAAEP,OAAO,CAACQ,+BAA+B,EAAEH,mBAAmB,CAAC;;EAEnE;EACA;EACA;EACA,OAAOK,IAAI,CAACC,KAAK,CACf,CAACL,aAAa,GAAGG,cAAc,IAAIZ,MAAM,CAACe,kBAC5C,CAAC;AACH"},"metadata":{},"sourceType":"script","externalDependencies":[]}