{"ast":null,"code":"\"use strict\";\n\nexports.roundToNearestMinutes = roundToNearestMinutes;\nvar _index = require(\"./constructFrom.js\");\nvar _index2 = require(\"./toDate.js\");\nvar _index3 = require(\"./_lib/roundingMethods.js\");\n\n/**\n * The {@link roundToNearestMinutes} function options.\n */\n\n/**\n * @name roundToNearestMinutes\n * @category Minute Helpers\n * @summary Rounds the given date to the nearest minute\n *\n * @description\n * Rounds the given date to the nearest minute (or number of minutes).\n * Rounds up when the given date is exactly between the nearest round minutes.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to round\n * @param options - An object with options.\n *\n * @returns The new date rounded to the closest minute\n *\n * @example\n * // Round 10 July 2014 12:12:34 to nearest minute:\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34))\n * //=> Thu Jul 10 2014 12:13:00\n *\n * @example\n * // Round 10 July 2014 12:07:30 to nearest quarter hour:\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { nearestTo: 15 })\n * // rounds up because given date is exactly between 12:00:00 and 12:15:00\n * //=> Thu Jul 10 2014 12:15:00\n */\nfunction roundToNearestMinutes(date, options) {\n  const nearestTo = options?.nearestTo ?? 1;\n  if (nearestTo < 1 || nearestTo > 30) return (0, _index.constructFrom)(date, NaN);\n  const _date = (0, _index2.toDate)(date);\n  const seconds = _date.getSeconds(); // relevant if nearestTo is 1, which is the default case\n  const minutes = _date.getMinutes() + seconds / 60;\n  const roundingMethod = (0, _index3.getRoundingMethod)(options?.roundingMethod);\n  const roundedMinutes = roundingMethod(minutes / nearestTo) * nearestTo;\n  const remainderMinutes = minutes % nearestTo;\n  const addedMinutes = Math.round(remainderMinutes / nearestTo) * nearestTo;\n  const result = (0, _index.constructFrom)(_date, _date);\n  result.setMinutes(roundedMinutes + addedMinutes, 0, 0);\n  return result;\n}","map":{"version":3,"names":["exports","roundToNearestMinutes","_index","require","_index2","_index3","date","options","nearestTo","constructFrom","NaN","_date","toDate","seconds","getSeconds","minutes","getMinutes","roundingMethod","getRoundingMethod","roundedMinutes","remainderMinutes","addedMinutes","Math","round","result","setMinutes"],"sources":["C:/Users/aashi/OneDrive/Desktop/mern_blog/client/node_modules/date-fns/roundToNearestMinutes.js"],"sourcesContent":["\"use strict\";\nexports.roundToNearestMinutes = roundToNearestMinutes;\nvar _index = require(\"./constructFrom.js\");\nvar _index2 = require(\"./toDate.js\");\n\nvar _index3 = require(\"./_lib/roundingMethods.js\");\n\n/**\n * The {@link roundToNearestMinutes} function options.\n */\n\n/**\n * @name roundToNearestMinutes\n * @category Minute Helpers\n * @summary Rounds the given date to the nearest minute\n *\n * @description\n * Rounds the given date to the nearest minute (or number of minutes).\n * Rounds up when the given date is exactly between the nearest round minutes.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to round\n * @param options - An object with options.\n *\n * @returns The new date rounded to the closest minute\n *\n * @example\n * // Round 10 July 2014 12:12:34 to nearest minute:\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34))\n * //=> Thu Jul 10 2014 12:13:00\n *\n * @example\n * // Round 10 July 2014 12:07:30 to nearest quarter hour:\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { nearestTo: 15 })\n * // rounds up because given date is exactly between 12:00:00 and 12:15:00\n * //=> Thu Jul 10 2014 12:15:00\n */\nfunction roundToNearestMinutes(date, options) {\n  const nearestTo = options?.nearestTo ?? 1;\n\n  if (nearestTo < 1 || nearestTo > 30)\n    return (0, _index.constructFrom)(date, NaN);\n\n  const _date = (0, _index2.toDate)(date);\n  const seconds = _date.getSeconds(); // relevant if nearestTo is 1, which is the default case\n  const minutes = _date.getMinutes() + seconds / 60;\n  const roundingMethod = (0, _index3.getRoundingMethod)(\n    options?.roundingMethod,\n  );\n  const roundedMinutes = roundingMethod(minutes / nearestTo) * nearestTo;\n  const remainderMinutes = minutes % nearestTo;\n  const addedMinutes = Math.round(remainderMinutes / nearestTo) * nearestTo;\n\n  const result = (0, _index.constructFrom)(_date, _date);\n  result.setMinutes(roundedMinutes + addedMinutes, 0, 0);\n  return result;\n}\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,qBAAqB,GAAGA,qBAAqB;AACrD,IAAIC,MAAM,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAC1C,IAAIC,OAAO,GAAGD,OAAO,CAAC,aAAa,CAAC;AAEpC,IAAIE,OAAO,GAAGF,OAAO,CAAC,2BAA2B,CAAC;;AAElD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,qBAAqBA,CAACK,IAAI,EAAEC,OAAO,EAAE;EAC5C,MAAMC,SAAS,GAAGD,OAAO,EAAEC,SAAS,IAAI,CAAC;EAEzC,IAAIA,SAAS,GAAG,CAAC,IAAIA,SAAS,GAAG,EAAE,EACjC,OAAO,CAAC,CAAC,EAAEN,MAAM,CAACO,aAAa,EAAEH,IAAI,EAAEI,GAAG,CAAC;EAE7C,MAAMC,KAAK,GAAG,CAAC,CAAC,EAAEP,OAAO,CAACQ,MAAM,EAAEN,IAAI,CAAC;EACvC,MAAMO,OAAO,GAAGF,KAAK,CAACG,UAAU,CAAC,CAAC,CAAC,CAAC;EACpC,MAAMC,OAAO,GAAGJ,KAAK,CAACK,UAAU,CAAC,CAAC,GAAGH,OAAO,GAAG,EAAE;EACjD,MAAMI,cAAc,GAAG,CAAC,CAAC,EAAEZ,OAAO,CAACa,iBAAiB,EAClDX,OAAO,EAAEU,cACX,CAAC;EACD,MAAME,cAAc,GAAGF,cAAc,CAACF,OAAO,GAAGP,SAAS,CAAC,GAAGA,SAAS;EACtE,MAAMY,gBAAgB,GAAGL,OAAO,GAAGP,SAAS;EAC5C,MAAMa,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACH,gBAAgB,GAAGZ,SAAS,CAAC,GAAGA,SAAS;EAEzE,MAAMgB,MAAM,GAAG,CAAC,CAAC,EAAEtB,MAAM,CAACO,aAAa,EAAEE,KAAK,EAAEA,KAAK,CAAC;EACtDa,MAAM,CAACC,UAAU,CAACN,cAAc,GAAGE,YAAY,EAAE,CAAC,EAAE,CAAC,CAAC;EACtD,OAAOG,MAAM;AACf"},"metadata":{},"sourceType":"script","externalDependencies":[]}