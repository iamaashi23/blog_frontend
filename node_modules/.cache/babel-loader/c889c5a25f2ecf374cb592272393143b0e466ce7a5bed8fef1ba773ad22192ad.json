{"ast":null,"code":"\"use strict\";\n\nexports.getOverlappingDaysInIntervals = getOverlappingDaysInIntervals;\nvar _index = require(\"./constants.js\");\nvar _index2 = require(\"./toDate.js\");\n\n/**\n * @name getOverlappingDaysInIntervals\n * @category Interval Helpers\n * @summary Get the number of days that overlap in two time intervals\n *\n * @description\n * Get the number of days that overlap in two time intervals\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param intervalLeft - The first interval to compare.\n * @param intervalRight - The second interval to compare.\n *\n * @returns The number of days that overlap in two time intervals\n *\n * @example\n * // For overlapping time intervals adds 1 for each started overlapping day:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n * )\n * //=> 3\n *\n * @example\n * // For non-overlapping time intervals returns 0:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n * )\n * //=> 0\n */\n\nfunction getOverlappingDaysInIntervals(intervalLeft, intervalRight) {\n  const [leftStartTime, leftEndTime] = [+(0, _index2.toDate)(intervalLeft.start), +(0, _index2.toDate)(intervalLeft.end)].sort();\n  const [rightStartTime, rightEndTime] = [+(0, _index2.toDate)(intervalRight.start), +(0, _index2.toDate)(intervalRight.end)].sort();\n  const isOverlapping = leftStartTime < rightEndTime && rightStartTime < leftEndTime;\n  if (!isOverlapping) {\n    return 0;\n  }\n  const overlapStartDate = rightStartTime < leftStartTime ? leftStartTime : rightStartTime;\n  const overlapEndDate = rightEndTime > leftEndTime ? leftEndTime : rightEndTime;\n  const differenceInMs = overlapEndDate - overlapStartDate;\n  return Math.ceil(differenceInMs / _index.millisecondsInDay);\n}","map":{"version":3,"names":["exports","getOverlappingDaysInIntervals","_index","require","_index2","intervalLeft","intervalRight","leftStartTime","leftEndTime","toDate","start","end","sort","rightStartTime","rightEndTime","isOverlapping","overlapStartDate","overlapEndDate","differenceInMs","Math","ceil","millisecondsInDay"],"sources":["C:/Users/aashi/OneDrive/Desktop/mern_blog/client/node_modules/date-fns/getOverlappingDaysInIntervals.js"],"sourcesContent":["\"use strict\";\nexports.getOverlappingDaysInIntervals = getOverlappingDaysInIntervals;\nvar _index = require(\"./constants.js\");\nvar _index2 = require(\"./toDate.js\");\n\n/**\n * @name getOverlappingDaysInIntervals\n * @category Interval Helpers\n * @summary Get the number of days that overlap in two time intervals\n *\n * @description\n * Get the number of days that overlap in two time intervals\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param intervalLeft - The first interval to compare.\n * @param intervalRight - The second interval to compare.\n *\n * @returns The number of days that overlap in two time intervals\n *\n * @example\n * // For overlapping time intervals adds 1 for each started overlapping day:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n * )\n * //=> 3\n *\n * @example\n * // For non-overlapping time intervals returns 0:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n * )\n * //=> 0\n */\n\nfunction getOverlappingDaysInIntervals(intervalLeft, intervalRight) {\n  const [leftStartTime, leftEndTime] = [\n    +(0, _index2.toDate)(intervalLeft.start),\n    +(0, _index2.toDate)(intervalLeft.end),\n  ].sort();\n  const [rightStartTime, rightEndTime] = [\n    +(0, _index2.toDate)(intervalRight.start),\n    +(0, _index2.toDate)(intervalRight.end),\n  ].sort();\n\n  const isOverlapping =\n    leftStartTime < rightEndTime && rightStartTime < leftEndTime;\n\n  if (!isOverlapping) {\n    return 0;\n  }\n\n  const overlapStartDate =\n    rightStartTime < leftStartTime ? leftStartTime : rightStartTime;\n\n  const overlapEndDate =\n    rightEndTime > leftEndTime ? leftEndTime : rightEndTime;\n\n  const differenceInMs = overlapEndDate - overlapStartDate;\n\n  return Math.ceil(differenceInMs / _index.millisecondsInDay);\n}\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,6BAA6B,GAAGA,6BAA6B;AACrE,IAAIC,MAAM,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AACtC,IAAIC,OAAO,GAAGD,OAAO,CAAC,aAAa,CAAC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASF,6BAA6BA,CAACI,YAAY,EAAEC,aAAa,EAAE;EAClE,MAAM,CAACC,aAAa,EAAEC,WAAW,CAAC,GAAG,CACnC,CAAC,CAAC,CAAC,EAAEJ,OAAO,CAACK,MAAM,EAAEJ,YAAY,CAACK,KAAK,CAAC,EACxC,CAAC,CAAC,CAAC,EAAEN,OAAO,CAACK,MAAM,EAAEJ,YAAY,CAACM,GAAG,CAAC,CACvC,CAACC,IAAI,CAAC,CAAC;EACR,MAAM,CAACC,cAAc,EAAEC,YAAY,CAAC,GAAG,CACrC,CAAC,CAAC,CAAC,EAAEV,OAAO,CAACK,MAAM,EAAEH,aAAa,CAACI,KAAK,CAAC,EACzC,CAAC,CAAC,CAAC,EAAEN,OAAO,CAACK,MAAM,EAAEH,aAAa,CAACK,GAAG,CAAC,CACxC,CAACC,IAAI,CAAC,CAAC;EAER,MAAMG,aAAa,GACjBR,aAAa,GAAGO,YAAY,IAAID,cAAc,GAAGL,WAAW;EAE9D,IAAI,CAACO,aAAa,EAAE;IAClB,OAAO,CAAC;EACV;EAEA,MAAMC,gBAAgB,GACpBH,cAAc,GAAGN,aAAa,GAAGA,aAAa,GAAGM,cAAc;EAEjE,MAAMI,cAAc,GAClBH,YAAY,GAAGN,WAAW,GAAGA,WAAW,GAAGM,YAAY;EAEzD,MAAMI,cAAc,GAAGD,cAAc,GAAGD,gBAAgB;EAExD,OAAOG,IAAI,CAACC,IAAI,CAACF,cAAc,GAAGhB,MAAM,CAACmB,iBAAiB,CAAC;AAC7D"},"metadata":{},"sourceType":"script","externalDependencies":[]}